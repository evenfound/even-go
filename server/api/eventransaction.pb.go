// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eventransaction.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EvenTransactionCreateInput struct {
	Format               int32    `protobuf:"varint,1,opt,name=format,proto3" json:"format,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvenTransactionCreateInput) Reset()         { *m = EvenTransactionCreateInput{} }
func (m *EvenTransactionCreateInput) String() string { return proto.CompactTextString(m) }
func (*EvenTransactionCreateInput) ProtoMessage()    {}
func (*EvenTransactionCreateInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_78cd2894cbb2da60, []int{0}
}

func (m *EvenTransactionCreateInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvenTransactionCreateInput.Unmarshal(m, b)
}
func (m *EvenTransactionCreateInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvenTransactionCreateInput.Marshal(b, m, deterministic)
}
func (m *EvenTransactionCreateInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvenTransactionCreateInput.Merge(m, src)
}
func (m *EvenTransactionCreateInput) XXX_Size() int {
	return xxx_messageInfo_EvenTransactionCreateInput.Size(m)
}
func (m *EvenTransactionCreateInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EvenTransactionCreateInput.DiscardUnknown(m)
}

var xxx_messageInfo_EvenTransactionCreateInput proto.InternalMessageInfo

func (m *EvenTransactionCreateInput) GetFormat() int32 {
	if m != nil {
		return m.Format
	}
	return 0
}

func (m *EvenTransactionCreateInput) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type EvenTransactionInput struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvenTransactionInput) Reset()         { *m = EvenTransactionInput{} }
func (m *EvenTransactionInput) String() string { return proto.CompactTextString(m) }
func (*EvenTransactionInput) ProtoMessage()    {}
func (*EvenTransactionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_78cd2894cbb2da60, []int{1}
}

func (m *EvenTransactionInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvenTransactionInput.Unmarshal(m, b)
}
func (m *EvenTransactionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvenTransactionInput.Marshal(b, m, deterministic)
}
func (m *EvenTransactionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvenTransactionInput.Merge(m, src)
}
func (m *EvenTransactionInput) XXX_Size() int {
	return xxx_messageInfo_EvenTransactionInput.Size(m)
}
func (m *EvenTransactionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EvenTransactionInput.DiscardUnknown(m)
}

var xxx_messageInfo_EvenTransactionInput proto.InternalMessageInfo

func (m *EvenTransactionInput) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type EvenTransactionResult struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvenTransactionResult) Reset()         { *m = EvenTransactionResult{} }
func (m *EvenTransactionResult) String() string { return proto.CompactTextString(m) }
func (*EvenTransactionResult) ProtoMessage()    {}
func (*EvenTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_78cd2894cbb2da60, []int{2}
}

func (m *EvenTransactionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvenTransactionResult.Unmarshal(m, b)
}
func (m *EvenTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvenTransactionResult.Marshal(b, m, deterministic)
}
func (m *EvenTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvenTransactionResult.Merge(m, src)
}
func (m *EvenTransactionResult) XXX_Size() int {
	return xxx_messageInfo_EvenTransactionResult.Size(m)
}
func (m *EvenTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_EvenTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_EvenTransactionResult proto.InternalMessageInfo

func (m *EvenTransactionResult) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *EvenTransactionResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*EvenTransactionCreateInput)(nil), "api.EvenTransactionCreateInput")
	proto.RegisterType((*EvenTransactionInput)(nil), "api.EvenTransactionInput")
	proto.RegisterType((*EvenTransactionResult)(nil), "api.EvenTransactionResult")
}

func init() { proto.RegisterFile("eventransaction.proto", fileDescriptor_78cd2894cbb2da60) }

var fileDescriptor_78cd2894cbb2da60 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x2d, 0x4b, 0xcd,
	0x2b, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x72, 0xe3, 0x92, 0x72, 0x2d, 0x4b, 0xcd, 0x0b, 0x41,
	0xc8, 0x3a, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x7a, 0xe6, 0x15, 0x94, 0x96, 0x08, 0x89, 0x71, 0xb1,
	0xa5, 0xe5, 0x17, 0xe5, 0x26, 0x96, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x79, 0x42,
	0x02, 0x5c, 0xcc, 0x25, 0x89, 0xe9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x92,
	0x11, 0x97, 0x08, 0x9a, 0x39, 0x10, 0x13, 0xa4, 0xb8, 0x38, 0xd2, 0x32, 0x73, 0x52, 0xf3, 0x12,
	0x73, 0x53, 0xc1, 0x66, 0x70, 0x06, 0xc1, 0xf9, 0x4a, 0xf6, 0x5c, 0xa2, 0x68, 0x7a, 0x82, 0x52,
	0x8b, 0x4b, 0x73, 0x4a, 0x84, 0xf8, 0xb8, 0x98, 0xf2, 0xb3, 0xc1, 0xca, 0x39, 0x82, 0x98, 0xf2,
	0xb3, 0x41, 0xce, 0x28, 0x02, 0xcb, 0x40, 0x6d, 0x84, 0xf2, 0x8c, 0x16, 0x31, 0x71, 0xf1, 0xa3,
	0x99, 0x20, 0xe4, 0xce, 0xc5, 0x06, 0xf1, 0x81, 0x90, 0xbc, 0x5e, 0x62, 0x41, 0xa6, 0x1e, 0x6e,
	0xdf, 0x49, 0x49, 0x61, 0x53, 0x00, 0x71, 0x82, 0x12, 0x83, 0x90, 0x3d, 0x17, 0x4b, 0x70, 0x46,
	0x7e, 0xb9, 0x90, 0x24, 0x36, 0x55, 0xc4, 0x18, 0xe0, 0xc4, 0xc5, 0xee, 0x98, 0x97, 0x98, 0x53,
	0x59, 0x95, 0x4a, 0xbe, 0x19, 0x8e, 0x5c, 0x6c, 0x61, 0xa9, 0x45, 0x99, 0x69, 0x95, 0x64, 0x1b,
	0x91, 0xc4, 0x06, 0x8e, 0x6d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x1f, 0x21, 0x53,
	0x06, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EvenTransactionClient is the client API for EvenTransaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvenTransactionClient interface {
	Create(ctx context.Context, in *EvenTransactionCreateInput, opts ...grpc.CallOption) (*EvenTransactionResult, error)
	Show(ctx context.Context, in *EvenTransactionInput, opts ...grpc.CallOption) (*EvenTransactionResult, error)
	Analyze(ctx context.Context, in *EvenTransactionInput, opts ...grpc.CallOption) (*EvenTransactionResult, error)
	Verify(ctx context.Context, in *EvenTransactionInput, opts ...grpc.CallOption) (*EvenTransactionResult, error)
}

type evenTransactionClient struct {
	cc *grpc.ClientConn
}

func NewEvenTransactionClient(cc *grpc.ClientConn) EvenTransactionClient {
	return &evenTransactionClient{cc}
}

func (c *evenTransactionClient) Create(ctx context.Context, in *EvenTransactionCreateInput, opts ...grpc.CallOption) (*EvenTransactionResult, error) {
	out := new(EvenTransactionResult)
	err := c.cc.Invoke(ctx, "/api.EvenTransaction/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evenTransactionClient) Show(ctx context.Context, in *EvenTransactionInput, opts ...grpc.CallOption) (*EvenTransactionResult, error) {
	out := new(EvenTransactionResult)
	err := c.cc.Invoke(ctx, "/api.EvenTransaction/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evenTransactionClient) Analyze(ctx context.Context, in *EvenTransactionInput, opts ...grpc.CallOption) (*EvenTransactionResult, error) {
	out := new(EvenTransactionResult)
	err := c.cc.Invoke(ctx, "/api.EvenTransaction/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evenTransactionClient) Verify(ctx context.Context, in *EvenTransactionInput, opts ...grpc.CallOption) (*EvenTransactionResult, error) {
	out := new(EvenTransactionResult)
	err := c.cc.Invoke(ctx, "/api.EvenTransaction/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvenTransactionServer is the server API for EvenTransaction service.
type EvenTransactionServer interface {
	Create(context.Context, *EvenTransactionCreateInput) (*EvenTransactionResult, error)
	Show(context.Context, *EvenTransactionInput) (*EvenTransactionResult, error)
	Analyze(context.Context, *EvenTransactionInput) (*EvenTransactionResult, error)
	Verify(context.Context, *EvenTransactionInput) (*EvenTransactionResult, error)
}

// UnimplementedEvenTransactionServer can be embedded to have forward compatible implementations.
type UnimplementedEvenTransactionServer struct {
}

func (*UnimplementedEvenTransactionServer) Create(ctx context.Context, req *EvenTransactionCreateInput) (*EvenTransactionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEvenTransactionServer) Show(ctx context.Context, req *EvenTransactionInput) (*EvenTransactionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (*UnimplementedEvenTransactionServer) Analyze(ctx context.Context, req *EvenTransactionInput) (*EvenTransactionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (*UnimplementedEvenTransactionServer) Verify(ctx context.Context, req *EvenTransactionInput) (*EvenTransactionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterEvenTransactionServer(s *grpc.Server, srv EvenTransactionServer) {
	s.RegisterService(&_EvenTransaction_serviceDesc, srv)
}

func _EvenTransaction_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvenTransactionCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvenTransactionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvenTransaction/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvenTransactionServer).Create(ctx, req.(*EvenTransactionCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvenTransaction_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvenTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvenTransactionServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvenTransaction/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvenTransactionServer).Show(ctx, req.(*EvenTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvenTransaction_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvenTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvenTransactionServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvenTransaction/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvenTransactionServer).Analyze(ctx, req.(*EvenTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvenTransaction_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvenTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvenTransactionServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvenTransaction/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvenTransactionServer).Verify(ctx, req.(*EvenTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvenTransaction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EvenTransaction",
	HandlerType: (*EvenTransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EvenTransaction_Create_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _EvenTransaction_Show_Handler,
		},
		{
			MethodName: "Analyze",
			Handler:    _EvenTransaction_Analyze_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _EvenTransaction_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventransaction.proto",
}
