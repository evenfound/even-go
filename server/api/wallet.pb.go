// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wallet.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WalletInput struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletInput) Reset()         { *m = WalletInput{} }
func (m *WalletInput) String() string { return proto.CompactTextString(m) }
func (*WalletInput) ProtoMessage()    {}
func (*WalletInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{0}
}

func (m *WalletInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletInput.Unmarshal(m, b)
}
func (m *WalletInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletInput.Marshal(b, m, deterministic)
}
func (m *WalletInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletInput.Merge(m, src)
}
func (m *WalletInput) XXX_Size() int {
	return xxx_messageInfo_WalletInput.Size(m)
}
func (m *WalletInput) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletInput.DiscardUnknown(m)
}

var xxx_messageInfo_WalletInput proto.InternalMessageInfo

func (m *WalletInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WalletInput) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateWalletInput struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Mnemonic             string   `protobuf:"bytes,3,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateWalletInput) Reset()         { *m = CreateWalletInput{} }
func (m *CreateWalletInput) String() string { return proto.CompactTextString(m) }
func (*CreateWalletInput) ProtoMessage()    {}
func (*CreateWalletInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{1}
}

func (m *CreateWalletInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateWalletInput.Unmarshal(m, b)
}
func (m *CreateWalletInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateWalletInput.Marshal(b, m, deterministic)
}
func (m *CreateWalletInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateWalletInput.Merge(m, src)
}
func (m *CreateWalletInput) XXX_Size() int {
	return xxx_messageInfo_CreateWalletInput.Size(m)
}
func (m *CreateWalletInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateWalletInput.DiscardUnknown(m)
}

var xxx_messageInfo_CreateWalletInput proto.InternalMessageInfo

func (m *CreateWalletInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateWalletInput) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateWalletInput) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

type WalletAccountInput struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Account              string   `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletAccountInput) Reset()         { *m = WalletAccountInput{} }
func (m *WalletAccountInput) String() string { return proto.CompactTextString(m) }
func (*WalletAccountInput) ProtoMessage()    {}
func (*WalletAccountInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{2}
}

func (m *WalletAccountInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletAccountInput.Unmarshal(m, b)
}
func (m *WalletAccountInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletAccountInput.Marshal(b, m, deterministic)
}
func (m *WalletAccountInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletAccountInput.Merge(m, src)
}
func (m *WalletAccountInput) XXX_Size() int {
	return xxx_messageInfo_WalletAccountInput.Size(m)
}
func (m *WalletAccountInput) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletAccountInput.DiscardUnknown(m)
}

var xxx_messageInfo_WalletAccountInput proto.InternalMessageInfo

func (m *WalletAccountInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WalletAccountInput) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *WalletAccountInput) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type WalletContractInput struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Account              string   `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Contract             string   `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Function             string   `protobuf:"bytes,5,opt,name=function,proto3" json:"function,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletContractInput) Reset()         { *m = WalletContractInput{} }
func (m *WalletContractInput) String() string { return proto.CompactTextString(m) }
func (*WalletContractInput) ProtoMessage()    {}
func (*WalletContractInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{3}
}

func (m *WalletContractInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletContractInput.Unmarshal(m, b)
}
func (m *WalletContractInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletContractInput.Marshal(b, m, deterministic)
}
func (m *WalletContractInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletContractInput.Merge(m, src)
}
func (m *WalletContractInput) XXX_Size() int {
	return xxx_messageInfo_WalletContractInput.Size(m)
}
func (m *WalletContractInput) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletContractInput.DiscardUnknown(m)
}

var xxx_messageInfo_WalletContractInput proto.InternalMessageInfo

func (m *WalletContractInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WalletContractInput) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *WalletContractInput) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *WalletContractInput) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *WalletContractInput) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

type WalletResult struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletResult) Reset()         { *m = WalletResult{} }
func (m *WalletResult) String() string { return proto.CompactTextString(m) }
func (*WalletResult) ProtoMessage()    {}
func (*WalletResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{4}
}

func (m *WalletResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletResult.Unmarshal(m, b)
}
func (m *WalletResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletResult.Marshal(b, m, deterministic)
}
func (m *WalletResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletResult.Merge(m, src)
}
func (m *WalletResult) XXX_Size() int {
	return xxx_messageInfo_WalletResult.Size(m)
}
func (m *WalletResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletResult.DiscardUnknown(m)
}

var xxx_messageInfo_WalletResult proto.InternalMessageInfo

func (m *WalletResult) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *WalletResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*WalletInput)(nil), "api.WalletInput")
	proto.RegisterType((*CreateWalletInput)(nil), "api.CreateWalletInput")
	proto.RegisterType((*WalletAccountInput)(nil), "api.WalletAccountInput")
	proto.RegisterType((*WalletContractInput)(nil), "api.WalletContractInput")
	proto.RegisterType((*WalletResult)(nil), "api.WalletResult")
}

func init() { proto.RegisterFile("wallet.proto", fileDescriptor_b88fd140af4deb6f) }

var fileDescriptor_b88fd140af4deb6f = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x2d, 0x9f, 0xa5, 0x53, 0x17, 0x95, 0xad, 0x0a, 0x2b, 0x7a, 0xa9, 0x7c, 0xea, 0x89, 0x43,
	0xab, 0x52, 0xa9, 0x55, 0x0f, 0x09, 0x49, 0x08, 0x41, 0x42, 0x91, 0x93, 0x28, 0xb7, 0x44, 0xcb,
	0x66, 0x48, 0x2c, 0xdb, 0xbb, 0x96, 0x59, 0x63, 0xf2, 0x4b, 0xf2, 0x0b, 0xf3, 0x3f, 0x22, 0xbc,
	0x36, 0xb2, 0x03, 0x07, 0x9c, 0xe4, 0xc6, 0x9b, 0x99, 0xf7, 0xde, 0xb0, 0x6f, 0xd7, 0x60, 0x44,
	0xcc, 0x75, 0x51, 0xf5, 0xfc, 0x40, 0x2a, 0x49, 0x2a, 0xcc, 0xb7, 0xcd, 0xff, 0xf0, 0xf1, 0x32,
	0x2e, 0x8e, 0x84, 0x1f, 0x2a, 0x42, 0xa0, 0x2a, 0x98, 0x87, 0xb4, 0xf4, 0xbd, 0xf4, 0xe3, 0x83,
	0x15, 0xff, 0x26, 0x5d, 0x68, 0xf8, 0x6c, 0x3e, 0x8f, 0x64, 0x70, 0x43, 0xcb, 0x71, 0x7d, 0x8d,
	0xcd, 0x6b, 0x68, 0x0d, 0x02, 0x64, 0x0a, 0x5f, 0x21, 0xb2, 0xea, 0x79, 0x02, 0x3d, 0x29, 0x6c,
	0x4e, 0x2b, 0xba, 0x97, 0x62, 0xf3, 0x0a, 0x88, 0x96, 0xde, 0xe3, 0x5c, 0x86, 0xe2, 0x85, 0x0e,
	0x14, 0xde, 0x33, 0xcd, 0x4f, 0x0c, 0x52, 0x68, 0x3e, 0x94, 0xe0, 0x8b, 0x36, 0x18, 0x48, 0xa1,
	0x02, 0xc6, 0xdf, 0xda, 0x61, 0xc5, 0xe2, 0x89, 0x34, 0xad, 0x6a, 0x56, 0x8a, 0x57, 0xbd, 0x59,
	0x28, 0xb8, 0xb2, 0xa5, 0xa0, 0x35, 0xdd, 0x4b, 0xb1, 0xd9, 0x07, 0x43, 0x2f, 0x66, 0xe1, 0x3c,
	0x74, 0x15, 0x69, 0x42, 0x59, 0x3a, 0xf1, 0x3e, 0x0d, 0xab, 0x2c, 0x1d, 0xd2, 0x86, 0x7a, 0x10,
	0x77, 0x92, 0x5d, 0x12, 0xf4, 0xf3, 0xb1, 0x06, 0x75, 0x4d, 0x24, 0x7f, 0xa0, 0x39, 0x44, 0x81,
	0xc1, 0x3a, 0x1f, 0xf2, 0xb9, 0xc7, 0x7c, 0xbb, 0x97, 0x09, 0xab, 0xdb, 0xca, 0x54, 0xb4, 0x93,
	0xf9, 0x8e, 0xfc, 0x03, 0x23, 0x1b, 0x2b, 0x69, 0xc7, 0x43, 0x1b, 0x49, 0x6f, 0x27, 0xff, 0x06,
	0xe3, 0x42, 0xb8, 0x92, 0x3b, 0xc5, 0x3c, 0xff, 0x42, 0x4b, 0x57, 0x26, 0xb8, 0x4c, 0xd3, 0xde,
	0x95, 0x3b, 0x86, 0x6f, 0xb9, 0x5b, 0x72, 0x10, 0x7a, 0xfe, 0x69, 0x60, 0x2f, 0x98, 0xc2, 0x31,
	0xde, 0x93, 0x4e, 0x86, 0x93, 0xbd, 0x47, 0xdb, 0xc5, 0x4e, 0xa0, 0xbb, 0x29, 0x16, 0x4e, 0x5d,
	0x9b, 0x17, 0xd7, 0x3a, 0x06, 0x9a, 0x1b, 0x3d, 0xbb, 0x93, 0xd1, 0x3e, 0x73, 0x99, 0xe0, 0x58,
	0x50, 0xa9, 0x0f, 0x9f, 0x86, 0xa8, 0xd2, 0x93, 0x98, 0xc9, 0x5d, 0x8f, 0xe6, 0x10, 0xbe, 0xe6,
	0x2c, 0xce, 0x97, 0x13, 0x8c, 0x2c, 0xbc, 0x2d, 0xfc, 0x47, 0x3a, 0xcf, 0x64, 0xd2, 0xf7, 0x42,
	0x68, 0x66, 0x3e, 0xf7, 0x88, 0xb6, 0x2b, 0x1d, 0x6d, 0x2c, 0x34, 0x12, 0x0b, 0xe9, 0x60, 0x41,
	0x9d, 0x69, 0x3d, 0xfe, 0x8a, 0xfd, 0x7a, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x34, 0x7d, 0x1e, 0xaa,
	0xd5, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	// GenerateWallet returns result=seed on success.
	GenerateWallet(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error)
	// CreateWallet returns result=seed on success.
	CreateWallet(ctx context.Context, in *CreateWalletInput, opts ...grpc.CallOption) (*WalletResult, error)
	// UnlockWallet returns result=duration on success.
	UnlockWallet(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletNextAccount returns result=address on success.
	WalletNextAccount(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletAccountDumpPrivateKey returns result=privkey on success.
	WalletAccountDumpPrivateKey(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletAccountDumpPublicKey returns result=pubkey on success.
	WalletAccountDumpPublicKey(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletAccountShowBalance returns result=balance on success.
	WalletAccountShowBalance(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error)
	// GetWalletInfo returns result=info on success.
	GetWalletInfo(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletAccountTxNewReg creates initial transaction.
	WalletAccountTxNewReg(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletAccountTxContract creates contract-deploy transaction.
	WalletAccountTxContract(ctx context.Context, in *WalletContractInput, opts ...grpc.CallOption) (*WalletResult, error)
	// WalletAccountTxInvoke creates contract-invoking transaction.
	WalletAccountTxInvoke(ctx context.Context, in *WalletContractInput, opts ...grpc.CallOption) (*WalletResult, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GenerateWallet(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/GenerateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWallet(ctx context.Context, in *CreateWalletInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnlockWallet(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/UnlockWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletNextAccount(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletNextAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletAccountDumpPrivateKey(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletAccountDumpPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletAccountDumpPublicKey(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletAccountDumpPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletAccountShowBalance(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletAccountShowBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWalletInfo(ctx context.Context, in *WalletInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/GetWalletInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletAccountTxNewReg(ctx context.Context, in *WalletAccountInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletAccountTxNewReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletAccountTxContract(ctx context.Context, in *WalletContractInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletAccountTxContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletAccountTxInvoke(ctx context.Context, in *WalletContractInput, opts ...grpc.CallOption) (*WalletResult, error) {
	out := new(WalletResult)
	err := c.cc.Invoke(ctx, "/api.Wallet/WalletAccountTxInvoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	// GenerateWallet returns result=seed on success.
	GenerateWallet(context.Context, *WalletInput) (*WalletResult, error)
	// CreateWallet returns result=seed on success.
	CreateWallet(context.Context, *CreateWalletInput) (*WalletResult, error)
	// UnlockWallet returns result=duration on success.
	UnlockWallet(context.Context, *WalletInput) (*WalletResult, error)
	// WalletNextAccount returns result=address on success.
	WalletNextAccount(context.Context, *WalletInput) (*WalletResult, error)
	// WalletAccountDumpPrivateKey returns result=privkey on success.
	WalletAccountDumpPrivateKey(context.Context, *WalletAccountInput) (*WalletResult, error)
	// WalletAccountDumpPublicKey returns result=pubkey on success.
	WalletAccountDumpPublicKey(context.Context, *WalletAccountInput) (*WalletResult, error)
	// WalletAccountShowBalance returns result=balance on success.
	WalletAccountShowBalance(context.Context, *WalletAccountInput) (*WalletResult, error)
	// GetWalletInfo returns result=info on success.
	GetWalletInfo(context.Context, *WalletInput) (*WalletResult, error)
	// WalletAccountTxNewReg creates initial transaction.
	WalletAccountTxNewReg(context.Context, *WalletAccountInput) (*WalletResult, error)
	// WalletAccountTxContract creates contract-deploy transaction.
	WalletAccountTxContract(context.Context, *WalletContractInput) (*WalletResult, error)
	// WalletAccountTxInvoke creates contract-invoking transaction.
	WalletAccountTxInvoke(context.Context, *WalletContractInput) (*WalletResult, error)
}

// UnimplementedWalletServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (*UnimplementedWalletServer) GenerateWallet(ctx context.Context, req *WalletInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWallet not implemented")
}
func (*UnimplementedWalletServer) CreateWallet(ctx context.Context, req *CreateWalletInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedWalletServer) UnlockWallet(ctx context.Context, req *WalletInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockWallet not implemented")
}
func (*UnimplementedWalletServer) WalletNextAccount(ctx context.Context, req *WalletInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletNextAccount not implemented")
}
func (*UnimplementedWalletServer) WalletAccountDumpPrivateKey(ctx context.Context, req *WalletAccountInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAccountDumpPrivateKey not implemented")
}
func (*UnimplementedWalletServer) WalletAccountDumpPublicKey(ctx context.Context, req *WalletAccountInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAccountDumpPublicKey not implemented")
}
func (*UnimplementedWalletServer) WalletAccountShowBalance(ctx context.Context, req *WalletAccountInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAccountShowBalance not implemented")
}
func (*UnimplementedWalletServer) GetWalletInfo(ctx context.Context, req *WalletInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (*UnimplementedWalletServer) WalletAccountTxNewReg(ctx context.Context, req *WalletAccountInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAccountTxNewReg not implemented")
}
func (*UnimplementedWalletServer) WalletAccountTxContract(ctx context.Context, req *WalletContractInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAccountTxContract not implemented")
}
func (*UnimplementedWalletServer) WalletAccountTxInvoke(ctx context.Context, req *WalletContractInput) (*WalletResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAccountTxInvoke not implemented")
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_GenerateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GenerateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/GenerateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GenerateWallet(ctx, req.(*WalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWallet(ctx, req.(*CreateWalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnlockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/UnlockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnlockWallet(ctx, req.(*WalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletNextAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletNextAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletNextAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletNextAccount(ctx, req.(*WalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletAccountDumpPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletAccountDumpPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletAccountDumpPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletAccountDumpPrivateKey(ctx, req.(*WalletAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletAccountDumpPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletAccountDumpPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletAccountDumpPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletAccountDumpPublicKey(ctx, req.(*WalletAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletAccountShowBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletAccountShowBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletAccountShowBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletAccountShowBalance(ctx, req.(*WalletAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/GetWalletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWalletInfo(ctx, req.(*WalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletAccountTxNewReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletAccountTxNewReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletAccountTxNewReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletAccountTxNewReg(ctx, req.(*WalletAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletAccountTxContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletContractInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletAccountTxContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletAccountTxContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletAccountTxContract(ctx, req.(*WalletContractInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletAccountTxInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletContractInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletAccountTxInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Wallet/WalletAccountTxInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletAccountTxInvoke(ctx, req.(*WalletContractInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateWallet",
			Handler:    _Wallet_GenerateWallet_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Wallet_CreateWallet_Handler,
		},
		{
			MethodName: "UnlockWallet",
			Handler:    _Wallet_UnlockWallet_Handler,
		},
		{
			MethodName: "WalletNextAccount",
			Handler:    _Wallet_WalletNextAccount_Handler,
		},
		{
			MethodName: "WalletAccountDumpPrivateKey",
			Handler:    _Wallet_WalletAccountDumpPrivateKey_Handler,
		},
		{
			MethodName: "WalletAccountDumpPublicKey",
			Handler:    _Wallet_WalletAccountDumpPublicKey_Handler,
		},
		{
			MethodName: "WalletAccountShowBalance",
			Handler:    _Wallet_WalletAccountShowBalance_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _Wallet_GetWalletInfo_Handler,
		},
		{
			MethodName: "WalletAccountTxNewReg",
			Handler:    _Wallet_WalletAccountTxNewReg_Handler,
		},
		{
			MethodName: "WalletAccountTxContract",
			Handler:    _Wallet_WalletAccountTxContract_Handler,
		},
		{
			MethodName: "WalletAccountTxInvoke",
			Handler:    _Wallet_WalletAccountTxInvoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
